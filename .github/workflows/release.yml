name: release

on:
  push:
    # Sequence of patterns matched against refs/tags
    tags:
    - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 11
      - name: Cache Gradle wrapper
        uses: actions/cache@v2
        with:
          path: ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-wrapper-${{ hashFiles('gradle/wrapper/gradle-wrapper.properties') }}
      - name: Cache Gradle packages
        uses: actions/cache@v2
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-caches-${{ hashFiles('**/*.gradle') }}
          restore-keys: ${{ runner.os }}-gradle-caches-
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build with Gradle
        run: ./gradlew build buildDeb buildDocker -s
      - name: Get the tag
        id: get_tag
        run: echo ::set-output name=tag::$(echo ${{ github.ref }} | cut -d / -f 3)
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: ${{ steps.get_tag.outputs.tag }}
          draft: true
          prerelease: false
      - name: Get the ZIP
        id: get_zip
        run: echo ::set-output name=filename::$(basename $(find build/distributions -name "*.zip"))
      - name: Upload Release ZIP
        id: upload-release-asset-zip
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./build/distributions/${{ steps.get_zip.outputs.filename }}
          asset_name: ${{ steps.get_zip.outputs.filename }}
          asset_content_type: application/zip
      - name: Get the DEB
        id: get_deb
        run: echo ::set-output name=filename::$(basename $(find build/distributions -name "*.deb"))
      - name: Upload Release DEB
        id: upload-release-asset-deb
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./build/distributions/${{ steps.get_deb.outputs.filename }}
          asset_name: ${{ steps.get_deb.outputs.filename }}
          asset_content_type: application/vnd.debian.binary-package
